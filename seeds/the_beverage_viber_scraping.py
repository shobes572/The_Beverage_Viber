# -*- coding: utf-8 -*-
"""The_Beverage_Viber_scraping.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eCtkpK1OmzjKWH7UwbxJKooydR17KXmh

# The Beverage Viber

>This notebook will be scraping websites for the beverage data we need for tea and coffee

### Lib imports and global variable declarations
"""

import pandas as pd
import requests as rq
from bs4 import BeautifulSoup as bs

raw_data = pd.DataFrame(columns=['beverage', 'category', 'info', 'image'])

"""### SpruceEats scraping"""

urls = {
    "coffee-domestic": "https://www.thespruceeats.com/best-coffee-recipes-4796504",
    "tea-domestic": "https://www.thespruceeats.com/best-tea-recipes-4801911",
    "coffee-international": "https://www.thespruceeats.com/cups-of-coffee-around-the-world-5112685"
}

def parse_html_content(cat, response):
  temp_df = pd.DataFrame(columns=raw_data.columns)
  soup = bs(response, 'html.parser').find('ul', id='ordered-list--structured_1-0').children
  parsed_page = [beverage for beverage in soup]
  parsed_page = list(filter(lambda a: a != '\n', parsed_page))
  for elem in parsed_page:
    bev_name = elem.find('span', class_='heading-toc').get('id')
    bev_image = elem.find('img').get('src')
    if not bev_image.startswith('https'):
      bev_image = elem.find('img').get('data-src')
    bev_desc = elem.find('p', class_='comp').text.strip()
    temp_df = temp_df.append({'beverage': bev_name, 'info': bev_desc, 'image': bev_image}, ignore_index=True)
  return temp_df

for i in urls:
  try:
    rs = rq.get(urls[i])
    if rs.status_code == 200:
      raw_data = raw_data.append(parse_html_content(i, rs.content), ignore_index=True)
      raw_data['category'].fillna(i, inplace=True)
    else:
      raise Exception("Invalid Response")
  except Exception as err:
    print(err)

raw_data['category'] = pd.Series([a[0] for a in raw_data['category'].str.split('-')])
raw_data['beverage'] = raw_data['beverage'].str.replace('-', ' ')

display(raw_data.head())

raw_data.to_json('./beverage_db.json', 'records')

